*******************
Grid'5000 tutorials
*******************

.. contents::
   :depth: 2

This tutorial illustrates the use of EnOSlib to interact with Grid'5000. For a
full description of the API and the available options, please refer to the API
documentation of the Grid'5000 provider.

.. hint::

   For a complete schema reference see :ref:`grid5000-schema`


.. include:: ./setup_g5k.rst

First example
=============

The following shows how to deal with a basic reservation. This will use some
nodes from the production environment and allow direct SSH access to them as
root (This uses `sudo-g5k` internally). For this purpose you must have a
``~/.ssh/id_rsa.pub`` file available. This is interesting when you don't mind
working with the production settings (OS and network).

Build the configuration from a dictionnary
------------------------------------------

.. literalinclude:: grid5000/tuto_grid5000_non_deploy.py
    :language: python
    :linenos:

Build the configuration programmatically
----------------------------------------

.. literalinclude:: grid5000/tuto_grid5000_non_deploy_p.py
    :language: python
    :linenos:

Complete configuration
----------------------

The above examples use some practical shortcuts to lighten the configuration.
Below you'll find a complete configuration that makes the exact same thing but
explicits the job_type (empty) and the network to use (production network).

.. literalinclude:: grid5000/tuto_grid5000_non_deploy_p_complete.py
    :language: python
    :linenos:


Deploy example
==============

We'll implement a classical workflow where 2 nodes are reserved and 2 roles are
described. Nodes are here put in a dedicated vlan. This example requires to
deploy a custom OS on the reserved nodes.

Build the configuration from a dictionary
-----------------------------------------


.. literalinclude:: grid5000/tuto_grid5000.py
   :language: python
   :linenos:

- You can launch the script using :

    .. code-block:: bash

        $ python tuto_grid5000.py

Build the configuration programmatically
----------------------------------------

The above script can be rewritten using the programmatic API.

.. literalinclude:: grid5000/tuto_grid5000_p.py
   :language: python
   :linenos:

.. note::

   Here we first create a network and pass its reference to each group of
   machine to configure the first interface of the Grid'5000 nodes.


Resources inspection
====================

The G5k provider object exposes the actual hosts and networks. It allows for
inspecting the acquire resources.

.. code-block:: python

    # Get all the reserved (and deployed) hosts:
    provider.hosts

    # Get all the networks
    provider.networks

    # Example on getting on host
    [x] provider.hosts[0]
    <G5kHost(roles=['control'], fqdn=grisou-8.nancy.grid5000.fr, ssh_address=grisou-8-kavlan-4.nancy.grid5000.fr, primary_network=<G5kVlanNetwork(roles=['my_network'], site=nancy, vlan_id=4)>, secondary_networks=[<G5kVlanNetwork(roles=['my_second_network'], site=nancy, vlan_id=5)>])>

    # Another example (what are the hosts in the same network as me)
    [x] provider.hosts[0].primary_network.hosts
    [<G5kHost(roles=['control'], fqdn=grisou-8.nancy.grid5000.fr, ssh_address=grisou-8-kavlan-4.nancy.grid5000.fr, primary_network=<G5kVlanNetwork(roles=['my_network'], site=nancy, vlan_id=4)>, secondary_networks=[<G5kVlanNetwork(roles=['my_second_network'], site=nancy, vlan_id=5)>])>,
     <G5kHost(roles=['control', 'compute'], fqdn=grisou-9.nancy.grid5000.fr, ssh_address=grisou-9-kavlan-4.nancy.grid5000.fr, primary_network=<G5kVlanNetwork(roles=['my_network'], site=nancy, vlan_id=4)>, secondary_networks=[<G5kVlanNetwork(roles=['my_second_network'], site=nancy, vlan_id=5)>])>]


Using the secondary interfaces
==============================

We put explicitly the second interface on a dedicated vlan. The
primary network being implicitly declared here will be placed in the production
network.

.. literalinclude:: grid5000/tuto_grid5000_secondary.py
   :language: python
   :linenos:


Using reservable disks on nodes
===============================

Grid'5000 has a `disk reservation
<https://www.grid5000.fr/w/Disk_reservation>`_ feature: on several
clusters, reserving secondary disks is mandatory if you want to use them
in your experiments.

The following tutorial shows how to reserve the disks using Enoslib, and
then how they can be used a raw devices.  Here the goal is to build a
software RAID array with ``mdadm`` and then benchmark it using ``fio``:

.. literalinclude:: grid5000/tuto_grid5000_reservable_disks.py
   :language: python
   :linenos:

::

    Finished 1 tasks (Granting root access on the nodes (sudo-g5k))
    ─────────────────────────────────────────────────────────────────────────────────────────────────────────
    Finished 13 tasks (Check availability of disk1,Check availability of disk2,Check availability of
    disk3,Check availability of disk4,Create partition on disk1,Create partition on disk2,Create partition on
    disk3,Create partition on disk4,Create RAID array,Install fio,Run fio,Stop RAID array,Wipe RAID
    signatures)
    ─────────────────────────────────────────────────────────────────────────────────────────────────────────
    fio-3.25 running on grimoire-8.nancy.grid5000.fr: average /dev/md0 read performance = 550.67 IOPS
    fio-3.25 running on grimoire-6.nancy.grid5000.fr: average /dev/md0 read performance = 519.71 IOPS


Using a custom environment
==========================

First, the description file of your environment should use resolvable URIs for the kadeploy3 server.
An example of such description is the following

.. code-block:: yaml

    # myimage.desc and myimage.tgz are both located in
    # the public subdirectory of rennes site of the user {{ login }}
    ---
    name: ubuntu1804-x64-min
    version: 2019052116
    description: ubuntu 18.04 (bionic) - min
    author: support-staff@list.grid5000.fr
    visibility: public
    destructive: false
    os: linux
    image:
    file: https://api.grid5000.fr/sid/sites/rennes/public/{{ login }}/myimage.tgz
    kind: tar
    compression: gzip
    postinstalls:
    - archive: server:///grid5000/postinstalls/g5k-postinstall.tgz
    compression: gzip
    script: g5k-postinstall --net netplan
    boot:
    kernel: "/vmlinuz"
    initrd: "/initrd.img"
    filesystem: ext4
    partition_type: 131
    multipart: false

Then in the configuration of the Grid'5000 provider you can specify the following:

.. code-block:: yaml

    job_name: test_myimage
    ...
    job_type: [deploy]
    env_name: https://api.grid5000.fr/sid/sites/rennes/public/{{ login }}/myimage.desc
    ...
    resources:
    ...


Subnet reservation
==================


This shows how to deal with a subnet reservation

Build the configuration from a dictionary
------------------------------------------

.. literalinclude:: grid5000/tuto_grid5000_subnet.py
    :language: python
    :linenos:

Build the configuration programmatically
----------------------------------------

.. literalinclude:: grid5000/tuto_grid5000_subnet_p.py
    :language: python
    :linenos:


Multi-sites deployment
=====================
>>>>>>> eb0e4d2 (doc/g5k: shorten tuto (remove finalize/prod))

There's no global scheduler on Grid'5000. So multi-sites reservation involves
finding a common slot to start the jobs on each requested site. |enoslib| will
do that for you. The logic behind is part of a more generic logic that can
synchronize resource between distinct providers.

.. literalinclude:: grid5000/tuto_grid5000_non_deploy_p_multisites.py
    :language: python
    :linenos:


Specific nodes reservation
==========================

.. literalinclude:: grid5000/tuto_grid5000_p_specific_servers.py
    :language: python
    :linenos:


Start Virtual Machines on nodes
===============================


.. hint::
  Note that it is now possible to use the ``VMonG5k`` provider directly. This
  provider will handle the reservation and deployment of virtual machines in an
  atomic way. The following example illustrates a mixed environment where some virtual
  machines are started on specific nodes of your reservation.


.. _g5k_tunnel:
Create a tunnel to a service
============================

.. literalinclude:: grid5000/tuto_grid5000_non_deploy_tunnel.py
    :language: python
    :linenos:


Disabling the cache
===================

.. literalinclude:: grid5000/tuto_grid5000_disable_cache.py
    :language: python
    :linenos:


.. _g5k_reconfigurable_firewall:
Reconfigurable Firewall: Open ports to the external world
=========================================================

The reconfigurable firewall on Grid'5000 allows you to open some ports of some
of your nodes. One rationale for this would be to allow connection from FIT
platform to Grid'5000. To learn more about this you can visit the `dedicated
documentation page. <https://www.grid5000.fr/w/Reconfigurable_Firewall>`_

.. literalinclude:: grid5000/tuto_grid5000_reconfigurable_firewall.py
    :language: python
    :linenos:

Docker's peculiarities
======================

There's a docker registry cache installed on Grid'5000 that can be used to
speed up your docker-based deployment and also to overcome the docker pull
limits.
Also the ``/var`` partition is rather small. You may want to bind docker
state directory `/var/lib/docker` to `/tmp/docker` to gain more space.

.. literalinclude:: grid5000/tuto_grid5000_non_deploy_docker.py
    :language: python
    :linenos:


Accessing internal services from the outside
============================================

Sometimes, your experiment involves services that you deploy on Grid'5000
nodes, and you would like to access these services from outside Grid'5000
(e.g. from your laptop or from a server independent from Grid'5000).

There are several solutions depending on your requirements:

- **Native IPv6 connectivity**: the reconfigurable firewall allows IPv6
  connectivity to your Grid'5000 nodes from the Internet.  This is the
  recommended method if your experiment is sensitive to network
  performance, because it uses native IP connectivity.  See
  :ref:`g5k_reconfigurable_firewall`.

- `Grid'5000 VPN <https://www.grid5000.fr/w/VPN>`_: this allows IPv4
  connectivity to the Grid'5000 network.  However, the VPN is a shared
  service and has no performance guarantee.  This method is useful if you
  want to quickly check the state of web service from your laptop, but you
  should not connect external machines to the VPN to perform actual
  network-intensive experiments (e.g. network benchmarks, stress tests, or
  latency measurements)

- **SOCKS proxy tunnel for HTTP traffic**:

   ::


      # on one shell
      ssh -ND 2100 access.grid5000.fr

      # on another shell
      export https_proxy="socks5h://localhost:2100"
      export http_proxy="socks5h://localhost:2100"

      # Note that browsers can work with proxy socks
      chromium-browser --proxy-server="socks5://127.0.0.1:2100" &

- `Grid'5000 HTTP reverse proxy
  <https://www.grid5000.fr/w/HTTP/HTTPs_access>`_.  This method has
  several limitations: it only works for HTTP services listening on ports
  80, 443, 8080 or 8443; it requires authenticating with your Grid'5000
  credentials.

- **Manual SSH port forwarding**:

   ::


      # on one shell
      ssh -NL 3000:paravance-42.rennes.grid5000.fr:3000 access.grid5000.fr

      # Now all traffic that goes on localhost:3000 is forwarded to paravance-42.rennes.grid5000.fr:3000

- **Programmatic SSH port forwarding**: the same method, but programmatically
  with :py:class:`~enoslib.infra.enos_g5k.provider.G5kTunnel`.  See also
  :ref:`g5k_tunnel`.
