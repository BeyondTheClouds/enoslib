---
workflow:
  rules:
    - if: $CI_COMMIT_REF_NAME =~ /dbg\//
      when: never
    - if: $CI_COMMIT_REF_NAME =~ /dev\// && $CI_COMMIT_TITLE =~ /WIP/
      when: never
    - if: $CI_MERGE_REQUEST_ID
      when: never
    - when: always

stages:
  - precheck
  - test
  - functional
  - invivog5k
  - package
  - publish

variables:
  DEBIAN_FRONTEND: noninteractive
  TZ: Europe/Paris
  GIT_SUBMODULE_STRATEGY: normal
  TOX_PACKAGE: "tox<4"
  FUNCTIONAL_TESTS: test_static_run_command.py test_static_gather_facts.py test_static_play_on.py test_static_run_ansible.py test_static_tasks.py test_sync_info.py test_dstat.py

###############################################################################
#
#                             PRECHECK STAGE
#
###############################################################################
precheck:
  image: python:3.11
  stage: precheck
  tags: [ci.inria.fr]
  script:
    - pip install pre-commit
    - pre-commit run --all-files

###############################################################################
#
#                             TEST STAGE
#
###############################################################################
python3.7:
  image: python:3.7
  stage: test
  tags: [ci.inria.fr]
  script:
    - pip install $TOX_PACKAGE
    - tox -e py37

python3.8:
  image: python:3.8
  stage: test
  tags: [ci.inria.fr]
  script:
    - pip install $TOX_PACKAGE
    - tox -e py38

python3.9:
  image: python:3.9
  stage: test
  tags: [ci.inria.fr]
  script:
    - pip install $TOX_PACKAGE
    - tox -e py39

python3.10:
  image: python:3.10
  stage: test
  tags: [ci.inria.fr]
  script:
    - pip install $TOX_PACKAGE
    - tox -e py310

python3.11:
  image: python:3.11
  stage: test
  tags: [ci.inria.fr]
  script:
    - pip install $TOX_PACKAGE
    - tox -e py311
  coverage: /^TOTAL\s+\d+\s+\d+\s+(\d+\%)$/
  artifacts:
    when: always
    paths:
      - htmlcov
    reports:
      junit: utest.xml
      coverage_report:
        coverage_format: cobertura
        path: cov.xml

pep8:
  image: python:3.11
  stage: test
  tags: [ci.inria.fr]
  script:
    - pip install $TOX_PACKAGE
    - tox -e pep8

pylint:
  image: python:3.11
  stage: test
  tags: [ci.inria.fr]
  script:
    - pip install $TOX_PACKAGE
    - tox -e pylint

typecheck-3.7:
  image: python:3.7
  stage: test
  tags: [ci.inria.fr]
  script:
    - pip install $TOX_PACKAGE
    - tox -e typecheck

typecheck-3.11:
  image: python:3.11
  stage: test
  tags: [ci.inria.fr]
  script:
    - pip install $TOX_PACKAGE
    - tox -e typecheck

sonar:
  image: python:3.10-buster
  stage: test
  allow_failure: true
  only:
    - tags
  tags:
    - large
    - ci.inria.fr
  script:
    - pip install -e .
    - apt update
    - apt install -y wget unzip openjdk-11-jre-headless --no-install-recommends
    - pip install pylint
    - wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.4.0.2170-linux.zip
    - unzip sonar-scanner-cli-4.4.0.2170-linux.zip
    - mv sonar-scanner-4.4.0.2170-linux sonar
    - wget --no-check-certificate https://sonarqube.inria.fr/static/digicertca.crt
    - keytool -import -alias inria -storepass "changeit" -keystore $(pwd)/sonar/jre/lib/security/cacerts -file digicertca.crt
    - pip install $TOX_PACKAGE && tox -e py310
    - sonar/bin/sonar-scanner -X -Dsonar.login=$SONAR_LOGIN

doc:
  image: python:3.10
  stage: test
  tags: [ci.inria.fr]
  script:
    - apt update
    - apt install -y pandoc
    - pip install $TOX_PACKAGE
    - tox -e docs
  artifacts:
    paths:
      - docs/_build/html

###############################################################################
#
#                             FUNCTIONAL STAGE
#
###############################################################################

## TEST VARIOUS ANSIBLE VERSIONS
#-----------------------------------------------
test_ansible_2_9: &ansible
  image: debian:11
  stage: functional
  tags: [ci.inria.fr]
  variables:
    ANSIBLE_VERSION: ">=2.9,<2.10"
  script:
    - |
      apt update
      # procps is required for "kill" for the dstat test
      apt install --no-install-recommends -y python3 python3-pip python3-venv iproute2 procps
      ip a
      # Create virtualenv
      python3 -m venv /tmp/venv
      . /tmp/venv/bin/activate
      python3 -m pip install -U pip wheel
      # Test several versions of ansible
      python3 -m pip install ansible${ANSIBLE_VERSION}
      # test_dstat needs pandas
      python3 -m pip install -e .[analysis]
      cd enoslib/tests/functional

      # Make sure we perform all tests and then display a summary
      failures=""
      retcode=0
      for test in ${FUNCTIONAL_TESTS}
      do
        python3 ${test} || { retcode=$?; failures="$failures $test"; }
      done
      [ -n "$failures" ] && echo "FAILED TESTS: $failures"
      exit $retcode

test_ansible_2_10:
  <<: *ansible
  variables:
    ANSIBLE_VERSION: ">=2.10,<2.11"

test_ansible_3:
  <<: *ansible
  variables:
    ANSIBLE_VERSION: ">=3,<4"

test_ansible_4:
  <<: *ansible
  variables:
    ANSIBLE_VERSION: ">=4,<5"

test_ansible_5:
  <<: *ansible
  variables:
    ANSIBLE_VERSION: ">=5,<6"

test_ansible_6:
  <<: *ansible
  variables:
    ANSIBLE_VERSION: ">=6,<7"

test_ansible_7:
  <<: *ansible
  variables:
    ANSIBLE_VERSION: ">=7,<8"

## TEST AGAINST DIFFERENT DISTROS
#-----------------------------------------------
test_functional$debian11$: &debian11
  image: debian:11
  stage: functional
  tags: [ci.inria.fr]
  script:
    - |
      apt update
      # procps is required for "kill" for the dstat test
      apt install --no-install-recommends -y python3 python3-pip python3-venv iproute2 procps
      ip a
      # Create virtualenv
      python3 -m venv /tmp/venv
      . /tmp/venv/bin/activate
      python3 -m pip install -U pip wheel
      # test_dstat needs pandas
      python3 -m pip install -e .[analysis]
      cd enoslib/tests/functional
      # Make sure we perform all tests and then display a summary
      failures=""
      retcode=0
      for test in ${FUNCTIONAL_TESTS}
      do
        python3 ${test} || { retcode=$?; failures="$failures $(basename $test)"; }
      done
      [ -n "$failures" ] && echo "FAILED TESTS: $failures"
      exit $retcode


## debian 10
#-----------------------------------------------
test_functional$debian10$: &debian10
  <<: *debian11
  image: debian:10


## debian testing
#-----------------------------------------------
test_functional$debiantesting$: &debiantesting
  <<: *debian11
  image: debian:testing


## ubuntu 20.04
#-----------------------------------------------
test_functional$ubuntu2004$: &ubuntu2004
  <<: *debian11
  image: ubuntu:20.04


## ubuntu 22.04
#-----------------------------------------------
test_functional$ubuntu2204$: &ubuntu2204
  <<: *debian11
  image: ubuntu:22.04


###############################################################################
#
#                             PACKAGE STAGE
#
###############################################################################

#### Entering the release zone
package:
  image: python:3.7
  stage: package
  tags: [ci.inria.fr]
  only:
    - tags
  script:
    - python setup.py bdist_wheel
  artifacts:
    paths:
      - dist/

###############################################################################
#
#                             PUBLISH STAGE
#
###############################################################################

pages:
  # when: manual
  stage: publish
  tags: [ci.inria.fr]
  only:
    - tags
  dependencies:
    - doc
  script:
    - mkdir -p public/
    - cp -r docs/_build/html/* public/
  artifacts:
    paths:
      - public

pypi:
  image: python:3.7
  stage: publish
  tags: [ci.inria.fr]
  only:
    - tags
  dependencies:
    - package
  script:
    - pip install twine
      # credentials are set in the env by gitlab
    - twine upload dist/* --verbose

########### G5K #############
test_invivo_g5k_deploy$debian11$:
  # stick to the distribution we'll found on g5k frontends
  image: debian:11
  stage: invivog5k
  tags: [ci.inria.fr]
  when: manual
  script:
    - env
    - apt update
    - apt install -y python3 python3-pip iproute2 cmake zlib1g-dev libssl-dev libffi-dev ssh
    - ip a
    - python3 -m pip install -e .
    - mkdir -p ~/.ssh
    - rm -f ~/.ssh/*
    - cat $PRIVATE_KEY > ~/.ssh/id_rsa
    - cat $PUBLIC_KEY > ~/.ssh/id_rsa.pub
    - chmod 600 ~/.ssh/id_rsa
    - cat $PYTHON_G5K > ~/.python-grid5000.yaml
    - cd docs/tutorials/
    - python3 grid5000/tuto_grid5000_commands.py || python3 cleanup_g5k_job.py tuto_grid5000_commands.py
    - python3 grid5000/tuto_grid5000_deploy.py || python3 cleanup_g5k_job.py tuto_grid5000_deploy.py